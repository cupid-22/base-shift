name: base-shift-core
services:
  grafana:
    image: grafana/grafana
    container_name: grafana_main
    restart: unless-stopped
    ports:
      - '3002:3000'
    volumes:
      - grafana-storage:/var/lib/grafana

  zookeeper:
    container_name: zookeeper_main
    restart: unless-stopped
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka_main
    restart: unless-stopped
    image: confluentinc/confluent-local:7.4.0
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 100
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_FACTOR: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LOG_DIRS: "tmp/kraft-combined-logs"
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:9101:9101"

  postgres:
    container_name: postgres_main
    restart: unless-stopped
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: base_shift
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    container_name: mongo_main
    restart: unless-stopped
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db

  mongo_express:
    image: mongo-express:latest
    container_name: mongo_express_main
    restart: always
    depends_on:
      - mongodb
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongodb

  react:
    container_name: react_main
    restart: unless-stopped
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  sonarqube:
    container_name: qube_main
    restart: unless-stopped
    image: sonarqube:latest
    environment:
      SONARQUBE_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
      SONARQUBE_JDBC_USERNAME: admin
      SONARQUBE_JDBC_PASSWORD: admin
    ports:
      - "9000:9000"
    depends_on:
      - postgres

  redis:
    container_name: redis_main
    image: 'redislabs/redismod'
    restart: unless-stopped
    ports:
      - '6379:6379'

volumes:
  postgres_data:
  mongo_data:
  grafana-storage: {}
