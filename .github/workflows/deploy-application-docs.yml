name: 🚀 Build and Deploy Application Sphinx Docs 📚

on:
  workflow_run:
    workflows: ["check-submodule-changes.yml"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "docs"
  cancel-in-progress: false

jobs:
  build_and_deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.outputs.docs_modified == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_TOKEN }}

      - name: Handle Git Submodules
        uses: ./.github/actions/handle-submodules
        with:
          branch: 'main'

      - name: Check for modified docs in submodules
        id: check_changes
        run: |
          changes=$(git diff --name-only HEAD^ HEAD)
          echo "Changes detected: $changes"
          docs_changed=$(echo "$changes" | grep "applications/.*/docs")
          
          if [ -n "$docs_changed" ]; then
            echo "Docs have changed, proceeding with build."
            echo "continue=true" >> $GITHUB_ENV
          else
            echo "No changes in docs, skipping build."
            echo "continue=false" >> $GITHUB_ENV

      # Exit if no docs were modified
      - name: Skip build if no docs changes
        if: env.continue == 'false'
        run: echo "Skipping docs build as no docs were modified."

      # Debugging submodules and their contents (optional step)
      - name: List submodules and fetch status (Debug Mode)
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          git submodule status
          git submodule foreach 'echo $name && git log -1'

      # Set up Python and install Poetry 🛠️ (only if docs are modified)
      - name: Set up Python and Install Poetry 🛠️
        if: env.continue == 'true'
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: '3.10'
          specific-module: '--only docs --no-root'

      # List and build docs directories (only if docs are modified)
      - name: List and Build Docs Directories
        if: env.continue == 'true'
        id: build_docs
        run: |
          docs_dir=$(find applications -type d -name 'docs')
          echo "Docs directories found: $docs_dir"
          for dir in $docs_dir; do
            app_name=$(basename $(dirname "$dir"))
            echo "Processing $app_name in $dir"
            cd "$dir" || { echo "Failed to enter directory: $dir"; exit 1; }
            
            # Check if Sphinx is installed and build documentation
            if ! command -v sphinx-build &> /dev/null; then
              echo "Sphinx not found, installing..."
              pip install sphinx
            else
              echo "Sphinx is already installed."
            fi
            
            make html
            
            # Verify that the index.html file exists
            if [ -f "build/html/index.html" ]; then
              echo "index.html found in $dir"
            else
              echo "Error: index.html not found in $dir"
              exit 1
            fi
            
            # Upload the documentation to a subfolder corresponding to the application name
            mkdir -p $GITHUB_WORKSPACE/artifacts/$app_name
            cp -r build/html/* $GITHUB_WORKSPACE/artifacts/$app_name/
            cd ../../../
          done
        shell: bash

      - name: List Artifacts (for Debugging) 🧐
        if: env.continue == 'true'
        run: ls -R artifacts/

      - name: Upload All Artifacts
        if: env.continue == 'true' && success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts

      - name: Deploy to GitHub Pages 📂
        if: env.continue == 'true' && success()
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    steps:
      - name: Notify Success or Failure 🎉😞
        run: |
          if [ "${{ needs.build_and_deploy.result }}" == "success" ]; then
            echo "🚀 Build and Deploy Sphinx Docs Success! 🎉"
          else
            echo "❌ Build and Deploy Sphinx Docs Failed! 😞"
          fi
