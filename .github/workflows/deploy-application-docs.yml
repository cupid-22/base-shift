name: 🚀 Build and Deploy Application Sphinx Docs 📚

on:
  push:
    branches:
      - main
    paths:
      - 'applications/**/docs/**'
      - '.github/workflows/**application-docs**'
  pull_request:
    branches:
      - main
    paths:
      - 'applications/**/docs/**'
      - '.github/workflows/**application-docs**'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "docs"
  cancel-in-progress: false

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive  # Ensure submodules are fetched
          token: ${{ secrets.PAT_TOKEN }}  # Use your PAT token

      # Debugging submodules and their contents
      - name: List submodules and fetch status (Debug Mode)
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          git submodule status
          git submodule foreach 'echo $name && git log -1'
          git submodule sync
          git submodule update --init --recursive

      # Force update submodules in case they are not synced properly
      - name: Force submodule update
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive
          git submodule foreach git pull origin main  # Ensure you are on the correct branch

      - name: Set up Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry 🛠️
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install docs dependencies using Poetry 📚
        run: poetry install --only docs --no-root

      # Build the root-level Sphinx docs and copy to root artifacts
      - name: Build root Sphinx documentation 🛠️
        run: |
          poetry run make html
          mkdir -p $GITHUB_WORKSPACE/artifacts/root
          cp -r build/html/* $GITHUB_WORKSPACE/artifacts/root/
        working-directory: docs

      - name: List and build docs directories
        id: build_docs
        run: |
          # Find 'docs' directories only at any level within 'applications'
          docs_dir=$(find applications -type d -name 'docs')
          echo "Docs directories found: $docs_dir"
          for dir in $docs_dir; do
            echo "This is the current directory: $(pwd)"
            if [ -d "$dir" ]; then
              app_name=$(basename $(dirname "$dir"))  # Get the parent directory name as app name
              echo "Processing $app_name in $dir"
              # Change to the docs directory
              cd "$dir" || { echo "Failed to enter directory: $dir"; exit 1; }
              
              # Check if Sphinx is installed
              if ! command -v sphinx-build &> /dev/null; then
                echo "Sphinx not found, installing..."
                pip install sphinx
              else
                echo "Sphinx is already installed."
              fi
              
              # Build the documentation
              make html
              
              # Verify that the index.html file exists
              if [ -f "build/html/index.html" ]; then
                echo "index.html found in $dir"
              else
                echo "Error: index.html not found in $dir"
                exit 1
              fi
              
              # Upload the documentation to a subfolder corresponding to the application name
              mkdir -p $GITHUB_WORKSPACE/artifacts/$app_name
              cp -r build/html/* $GITHUB_WORKSPACE/artifacts/$app_name/
              cd ../../../
            else
              echo "Warning: Directory not found - $dir"
            fi
          done
        shell: bash

      - name: List artifacts (for debugging) 🧐
        run: ls -R artifacts/

      - name: Upload all artifacts
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts

      - name: Deploy to GitHub Pages 📂
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    steps:
      - name: Notify success or failure 🎉😞
        run: |
          if [ "${{ needs.build_and_deploy.result }}" == "success" ]; then
            echo "🚀 Build and Deploy Sphinx Docs Success! 🎉"
          else
            echo "❌ Build and Deploy Sphinx Docs Failed! 😞"
          fi
