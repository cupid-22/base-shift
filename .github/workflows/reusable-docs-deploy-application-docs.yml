name: 🔄 Ship Application Docs 🚀

on:
  workflow_call:
    inputs:
      docs_modified:
        type: boolean
        required: true
      branch:
        type: string
        required: false

  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "application_docs"
  cancel-in-progress: false

jobs:
  check_conditions:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.docs_modified }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Debug output
        run: |
          echo "Should run: ${{ steps.check.outputs.should_run }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Docs modified: ${{ inputs.docs_modified }}"
        shell: bash

  build_and_deploy:
    needs: check_conditions
    if: needs.check_conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set branch to checkout
        id: set_branch
        run: |
          if [[ -z "${{ inputs.branch }}" ]]; then
            echo "branch=main" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ inputs.branch }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set_branch.outputs.branch }}
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_TOKEN }}

      - name: Handle Git Submodules
        uses: ./.github/actions/handle-submodules
        with:
          branch: 'main'

      - name: Set up Python and Install Poetry 🛠️
        uses: ./.github/actions/setup-python-poetry
        with:
          python-versions: '3.10,3.12.3'
          specific-module: '--only docs --no-root'

      - name: List and Build Docs Directories
        id: build_docs
        run: |
          set -e
          docs_dir=$(find applications -type d -name 'docs')
          echo "Docs directories found: $docs_dir"
          
          for dir in $docs_dir; do
            app_name=$(basename $(dirname "$dir"))
            echo "Processing $app_name in $dir"
            cd "$dir" || { echo "Failed to enter directory: $dir"; exit 1; }

            # Check for Poetry and pyproject.toml
            if [[ -f "../pyproject.toml" && -f "../poetry.lock" ]]; then
              echo "Poetry found. Installing dependencies using Poetry..."
              python_version=$(grep -oP 'python\s*=\s*"\K([^"]+)' "../pyproject.toml" | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$')
              env use python_version
              poetry install --only docs --no-root
            elif [[ -f "requirements.docs.txt" ]]; then
              echo "requirements.docs.txt found. Installing dependencies with pip..."
              pip install -r requirements.docs.txt
            else
              echo "No poetry or requirements.docs.txt found. Skipping dependency installation."
            fi

            if ! command -v sphinx-build &> /dev/null; then
              echo "Sphinx not found, installing..."
              pip install sphinx
            else
              echo "Sphinx is already installed."
            fi

            make html

            if [ -f "build/html/index.html" ]; then
              echo "index.html found in $dir"
            else
              echo "Error: index.html not found in $dir"
              exit 1
            fi

            mkdir -p $GITHUB_WORKSPACE/artifacts/$app_name
            cp -r build/html/* $GITHUB_WORKSPACE/artifacts/$app_name/
            cd ../../../
          done
        shell: bash

      - name: List Artifacts (for Debugging) 🧐
        run: ls -R artifacts/

      - name: Upload Application Docs Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: application-docs
          path: artifacts
          retention-days: 1

  notify:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success or Failure 🎉😞
        run: |
          if [ "${{ needs.build_and_deploy.result }}" == "success" ]; then
            echo "🚀 Build and Deploy Sphinx Docs Success! 🎉"
          else
            echo "❌ Build and Deploy Sphinx Docs Failed! 😞"
          fi

  root_docs:
    needs: build_and_deploy
    if: needs.build_and_deploy.result == 'success'
    uses: ./.github/workflows/reusable-docs-deploy-root-docs.yml
    secrets: inherit
    with:
      branch: ${{ inputs.branch || 'main' }}
