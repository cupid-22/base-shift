name: ðŸ”„ Post PR Clean-ups

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly on Sunday at midnight
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number (leave empty for full cleanup)'
        required: false
        type: string
      action_type:
        description: 'Type of cleanup'
        required: true
        type: choice
        options:
          - 'full_cleanup'
          - 'pr_specific'
        default: 'full_cleanup'
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull request number'
        required: false
        type: number
      pr_action:
        description: 'Current state of PR'
        required: false
        type: string
      base_ref:
        description: 'Base branch reference'
        required: false
        type: string
      head_ref:
        description: 'Head branch reference'
        required: false
        type: string

jobs:
  fetch_prs:
    runs-on: ubuntu-latest
    outputs:
      pr_list: ${{ steps.get_prs.outputs.pr_list }}
    steps:
      - name: Get Open PRs
        id: get_prs
        if: github.event_name == 'workflow_dispatch'
        run: |
          PR_LIST=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open" | \
            jq -r '.[] | select(.state=="open") | "\(.number): \(.title)"' | \
            jq -R -s -c 'split("\n")[:-1]')
          echo "pr_list=${PR_LIST}" >> $GITHUB_OUTPUT

  check_conditions:
    runs-on: ubuntu-latest
    needs: fetch_prs
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      is_scheduled: ${{ steps.check.outputs.is_scheduled }}
    steps:
      - name: Check conditions
        id: check
        run: |
          # Initialize variables
          SHOULD_RUN="true"
          IS_SCHEDULED="false"
          
          # Determine run type
          if [ "${{ github.event_name }}" == "schedule" ]; then
            IS_SCHEDULED="true"
          fi
          
          # Get PR number from various sources
          PR_NUMBER="${{ github.event.pull_request.number || github.event.number || inputs.pr_number }}"
          
          # Handle action_type for workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ inputs.action_type }}" == "full_cleanup" ]; then
              PR_NUMBER=""
            fi
          fi
          
          echo "should_run=${SHOULD_RUN}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUMBER:-full-cleanup}" >> $GITHUB_OUTPUT
          echo "is_scheduled=${IS_SCHEDULED}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Debug step
        run: |
          echo "Should Run: ${{ steps.check.outputs.should_run }}"
          echo "PR Number: ${{ steps.check.outputs.pr_number }}"
          echo "Scheduled run: ${{ steps.check.outputs.is_scheduled }}"
          echo "pr_action: ${{ inputs.pr_action || 'not provided' }}"
          echo "base_ref: ${{ inputs.base_ref || 'not provided' }}"
          echo "head_ref: ${{ inputs.head_ref || 'not provided' }}"
          echo "Available PRs: ${{ needs.fetch_prs.outputs.pr_list }}"

  prune-dead-branches:
    needs: [check_conditions]
    runs-on: ubuntu-latest
    if: needs.check_conditions.outputs.should_run == 'true'
    steps:
      - name: Checkout the repository with submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_TOKEN }}

      - name: Handle Git Submodules
        uses: ./.github/actions/handle-submodules
        with:
          branch: ${{ inputs.head_ref || github.head_ref || 'main' }}

      - name: Run Clean-up scripts
        uses: ./.github/actions/clean-up
        with:
          pr_number: ${{ needs.check_conditions.outputs.pr_number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          is_full_cleanup: ${{ github.event.inputs.is_full_cleanup == 'true' }}

  misc-checks:
    needs: [check_conditions]
    runs-on: ubuntu-latest
    if: needs.check_conditions.outputs.should_run == 'true'
    steps:
      - name: Checkout the repository with submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_TOKEN }}

      - name: Handle Git Submodules
        uses: ./.github/actions/handle-submodules
        with:
          branch: ${{ inputs.head_ref || github.head_ref || 'main' }}

      - name: Check for large file post merge
        run: |
          # Set size limit (in bytes)
          size_limit=10000000  # 10 MB

          # Find large files
          large_files=$(find . -type f -size +${size_limit}c)

          if [ -n "$large_files" ]; then
            echo "Warning: The following files are larger than the size limit (${size_limit} bytes):"
            echo "$large_files"
          else
            echo "No large files found."
          fi
