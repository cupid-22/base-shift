name: ðŸ”„ Open Pull Request Workflow Jobs

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number'
        required: true
        type: number
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull request number'
        required: true
        type: number
      pr_action:
        description: 'Current state of PR'
        required: true
        type: string
      base_ref:
        description: 'Base branch reference'
        required: false
        type: string
      head_ref:
        description: 'Head branch reference'
        required: false
        type: string

jobs:
  check_conditions:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.check.outputs.pr_number }}
    steps:
      - name: Check conditions
        id: check
        run: |
          PR_NUMBER="${{ github.event.pull_request.number || github.event.number || inputs.pr_number }}"
          
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR number found. Exiting."
            exit 1
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        shell: bash

      - name: Debug step
        run: |
          echo "PR Number: ${{ steps.check.outputs.pr_number }}"
          echo "pr_action: ${{ inputs.pr_action }}"
          echo "base_ref: ${{ inputs.base_ref }}"
          echo "head_ref: ${{ inputs.head_ref }}"

  pr-labeler:
    runs-on: ubuntu-latest
    needs: check_conditions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate lines of code
        id: diff
        env:
          BASE_REF: ${{ inputs.base_ref || github.base_ref }}
          HEAD_REF: ${{ inputs.head_ref || github.head_ref }}
        run: |
          LOC=$(git diff --shortstat origin/${BASE_REF}...${HEAD_REF} | awk '{print $1}')
          echo "lines_of_code=${LOC:-0}" >> $GITHUB_ENV

      - name: Determine PR size label
        if: ${{ env.lines_of_code }}
        id: determine-label
        run: |
          if [ ${{ env.lines_of_code }} -eq 0 ]; then
            echo "label=no-changes" >> $GITHUB_OUTPUT
            echo "color=CCCCCC" >> $GITHUB_OUTPUT
          elif [ ${{ env.lines_of_code }} -lt 10 ]; then
            echo "label=size/XS" >> $GITHUB_OUTPUT
            echo "color=87CEFA" >> $GITHUB_OUTPUT
          elif [ ${{ env.lines_of_code }} -lt 50 ]; then
            echo "label=size/S" >> $GITHUB_OUTPUT
            echo "color=66CDAA" >> $GITHUB_OUTPUT
          elif [ ${{ env.lines_of_code }} -lt 100 ]; then
            echo "label=size/M" >> $GITHUB_OUTPUT
            echo "color=FFFF00" >> $GITHUB_OUTPUT
          elif [ ${{ env.lines_of_code }} -lt 500 ]; then
            echo "label=size/L" >> $GITHUB_OUTPUT
            echo "color=FFA500" >> $GITHUB_OUTPUT
          else
            echo "label=size/XL" >> $GITHUB_OUTPUT
            echo "color=FF4500" >> $GITHUB_OUTPUT
          fi

      - name: Check existing labels
        id: check-labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.check_conditions.outputs.pr_number }}
        run: |
          LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name')
          if echo "$LABELS" | grep -q "${{ steps.determine-label.outputs.label }}"; then
            echo "label_exists=true" >> $GITHUB_OUTPUT
          else
            echo "label_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or update label
        if: steps.check-labels.outputs.label_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.check_conditions.outputs.pr_number }}
        run: |
          gh label create "${{ steps.determine-label.outputs.label }}" \
            --color "${{ steps.determine-label.outputs.color }}" \
            --description "PR size: ${{ steps.determine-label.outputs.label }}" \
            || true
          gh pr edit $PR_NUMBER --add-label "${{ steps.determine-label.outputs.label }}"

  pr-assign-reviewer:
    needs: check_conditions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Assign reviewer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.check_conditions.outputs.pr_number }}
        run: |
          # Retrieve the pull request number, either from event or as input
          REVIEWER="cupid-22"
          EXISTING_REVIEWERS=$(gh pr view $PR_NUMBER --json reviewRequests --jq '.reviewRequests[].login')

          if [[ ! $EXISTING_REVIEWERS =~ $REVIEWER ]]; then
            gh pr edit $PR_NUMBER --add-reviewer "$REVIEWER"
          else
            echo "Reviewer $REVIEWER is already assigned."
          fi

  pr-description:
    runs-on: ubuntu-latest
    needs: check_conditions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add PR template
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.check_conditions.outputs.pr_number }}
        run: |
          PR_BODY=$(cat << EOF
          ## Change Description
          <!-- Please provide a brief description of the changes in this PR, along with the ticket link -->
          
          ## Type of Change
          <!-- Please select the appropriate options -->
          - [ ] Bug fix
          - [ ] New feature
          - [ ] Breaking change
          - [ ] Documentation update
          
          ## Linters and Checks
          <!-- Please select the linters and checks that have been run -->
          - [ ] ESLint
          - [ ] Prettier
          - [ ] Unit Tests
          - [ ] Integration Tests
          
          ## Additional Notes
          <!-- Any additional information that reviewers should be aware of -->
          
          EOF
          )
          gh pr edit $PR_NUMBER --body "$PR_BODY"

  update-changelog:
    needs: check_conditions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Update CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ needs.check_conditions.outputs.pr_number }}
      run: |
        # Setup git
        git config user.name "GitHub Action"
        git config user.email "action@github.com"

        # Create and checkout a new temporary branch
        TEMP_BRANCH="temp-changelog-update-${PR_NUMBER}"
        git checkout -b $TEMP_BRANCH

        # Get PR description
        PR_DESCRIPTION=$(gh pr view $PR_NUMBER --json body --jq .body)

        # Update CHANGELOG.md
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi

        echo "## PR #$PR_NUMBER" >> CHANGELOG.md
        echo "$PR_DESCRIPTION" >> CHANGELOG.md
        echo "" >> CHANGELOG.md

        # Commit changes
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for PR #$PR_NUMBER"

        # Push the temporary branch
        git push origin $TEMP_BRANCH

        # Create a new PR to merge the temporary branch into the original PR's branch
        ORIGINAL_PR_BRANCH=$(gh pr view $PR_NUMBER --json headRefName --jq .headRefName)
        gh pr create --base $ORIGINAL_PR_BRANCH --head $TEMP_BRANCH --title "Update CHANGELOG for PR #$PR_NUMBER" --body "This PR updates the CHANGELOG.md for PR #$PR_NUMBER. Once merged, please delete this branch."

        # Add a comment to the original PR
        gh pr comment $PR_NUMBER --body "I've created a new PR to update the CHANGELOG.md. Please review and merge it."

    - name: Cleanup
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ needs.check_conditions.outputs.pr_number }}
      run: |
        # Delete the temporary branch after 1 hour
        TEMP_BRANCH="temp-changelog-update-${PR_NUMBER}"
        (sleep 3600 && git push origin --delete $TEMP_BRANCH) &